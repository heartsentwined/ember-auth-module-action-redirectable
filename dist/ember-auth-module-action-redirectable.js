// Generated by EmberScript 0.0.7
var get$ = Ember.get;
Em.onLoad('Ember.Application', function (application) {
  return application.initializer({
    name: 'ember-auth.module.action-redirectable',
    before: 'ember-auth-load',
    initialize: function (container, app) {
      return app.register('authModule:actionRedirectable', get$(get$(Em, 'Auth'), 'ActionRedirectableAuthModule'));
    }
  });
});
Em.onLoad('Ember.Application', function (application) {
  return application.initializer({
    name: 'ember-auth.module.action-redirectable.inject',
    after: 'ember-auth.module.action-redirectable',
    initialize: function (container, app) {
      app.inject('authModule:actionRedirectable', 'router', 'router:main');
      return get$(Em, 'Route').reopen({
        beforeModel: function (queryParams, transition) {
          if (!(null != transition))
            transition = queryParams;
          get$(get$(get$(this, 'auth'), 'module'), 'actionRedirectable').registerRedirect(transition);
          return this._super.apply(this, arguments);
        }
      });
    }
  });
});// Generated by EmberScript 0.0.7
var get$ = Ember.get;
var set$ = Ember.set;
set$(get$(Em, 'Auth'), 'ActionRedirectableAuthModule', Ember.Object.extend({
  init: function () {
    null != get$(this, 'config') || set$(this, 'config', get$(get$(this, 'auth'), 'actionRedirectable'));
    get$(this, 'auth').addHandler('signInSuccess', get$(this, 'redirect'));
    return get$(this, 'auth').addHandler('signOutSuccess', get$(this, 'redirect'));
  },
  signInRedir: null,
  signOutRedir: null,
  registerRedirect: function (transition) {
    var routeName;
    routeName = this.canonicalizeRoute(get$(transition, 'targetName'));
    if (!in$(routeName, this.getBlacklist('signIn')))
      set$(this, 'signInRedir', transition);
    if (!in$(routeName, this.getBlacklist('signOut')))
      return set$(this, 'signOutRedir', transition);
  },
  canonicalizeRoute: function (route) {
    var endsWith;
    if (!(typeof route === 'string'))
      return '';
    endsWith = function (haystack, needle) {
      var d;
      d = get$(haystack, 'length') - get$(needle, 'length');
      return d >= 0 && haystack.lastIndexOf(needle) === d;
    };
    if (!endsWith(route, '.index'))
      return route;
    return route.substr(0, route.lastIndexOf('.index'));
  },
  getBlacklist: function (env) {
    var blacklist;
    if (!(blacklist = get$(this, 'config')['' + env + 'Blacklist']))
      return [];
    return function (accum$) {
      var route;
      for (var i$ = 0, length$ = blacklist.length; i$ < length$; ++i$) {
        route = blacklist[i$];
        accum$.push(this.canonicalizeRoute(route));
      }
      return accum$;
    }.call(this, []);
  },
  resolveRedirect: function (env) {
    var fallback, isSmart;
    if (!(env === 'signIn' || env === 'signOut'))
      return null;
    isSmart = get$(this, 'config')['' + env + 'Smart'];
    fallback = this.canonicalizeRoute(get$(this, 'config')['' + env + 'Route']);
    if (!fallback)
      return null;
    if (!isSmart)
      return fallback;
    return this.get('' + env + 'Redir') || fallback;
  },
  redirect: function () {
    var env, result;
    env = get$(get$(this, 'auth'), 'signedIn') ? 'signIn' : 'signOut';
    if (!(result = this.resolveRedirect(env)))
      return;
    switch (typeof result) {
    case 'object':
      return result.retry();
    case 'string':
      return get$(this, 'router').transitionTo(result);
    }
  }
}));
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
};
// Generated by EmberScript 0.0.7
var get$ = Ember.get;
get$(Em, 'Auth').reopen({
  actionRedirectable: {
    signInRoute: false,
    signOutRoute: false,
    signInSmart: false,
    signOutSmart: false,
    signInBlacklist: [],
    signOutBlacklist: []
  }
});